<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Portfolio on Lekshmi Kolappan</title>
    <link>https://l4linux.com/portfolio/</link>
    <description>Recent content in Portfolio on Lekshmi Kolappan</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 03 Jan 2025 23:00:00 +0000</lastBuildDate>
    <atom:link href="https://l4linux.com/portfolio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cloud CV - Serverless Resume with AWS Infrastructure as Code</title>
      <link>https://l4linux.com/portfolio/cloud-cv/</link>
      <pubDate>Fri, 03 Jan 2025 23:00:00 +0000</pubDate>
      <guid>https://l4linux.com/portfolio/cloud-cv/</guid>
      <description>&lt;h2 id=&#34;what-is-the-significance-of-this&#34;&gt;What is the significance of this?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Serverless Architecture&lt;/strong&gt;: A fully serverless resume website showcasing modern cloud-native development practices&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;: Complete AWS infrastructure managed through Terraform with automated deployments&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;CI/CD Pipeline&lt;/strong&gt;: GitHub Actions automation for one-click deployments with visitor counter functionality&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Local Development&lt;/strong&gt;: LocalStack integration for local AWS development without cloud costs&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Professional Portfolio&lt;/strong&gt;: Demonstrates SRE/DevOps expertise through the project itself&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-is-automation-accomplished&#34;&gt;How is automation accomplished?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Terraform Infrastructure&lt;/strong&gt;: Complete AWS infrastructure provisioned as code including S3, CloudFront, Lambda, DynamoDB, and API Gateway&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;GitHub Actions CI/CD&lt;/strong&gt;: Automated deployment pipeline that builds, tests, and deploys on every commit&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Serverless Backend&lt;/strong&gt;: Python Lambda function with DynamoDB for visitor counter with CORS support&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Static Website Hosting&lt;/strong&gt;: S3 + CloudFront for global CDN with automatic HTTPS and custom domain support&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LocalStack Development&lt;/strong&gt;: Local AWS environment for development and testing without cloud costs&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Infrastructure Monitoring&lt;/strong&gt;: CloudWatch logs and metrics for observability and debugging&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AWS account with programmatic access&lt;/li&gt;&#xA;&lt;li&gt;AWS IAM user with the following policies:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;AmazonS3FullAccess&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CloudFrontFullAccess&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AWSLambdaFullAccess&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AmazonDynamoDBFullAccess&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AmazonAPIGatewayAdministrator&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;IAMFullAccess&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CloudWatchLogsFullAccess&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Terraform &amp;gt;= 1.0&lt;/li&gt;&#xA;&lt;li&gt;Docker (for LocalStack development)&lt;/li&gt;&#xA;&lt;li&gt;Git and GitHub account&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://github.com/Lforlinux/Cloud-CV&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;how-to-deploy-the-infrastructure&#34;&gt;How to deploy the infrastructure&lt;/h2&gt;&#xA;&lt;h3 id=&#34;automated-deployment-recommended&#34;&gt;Automated Deployment (Recommended)&lt;/h3&gt;&#xA;&lt;p&gt;The project uses GitHub Actions for one-click deployment:&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS EKS Deployment through terraform</title>
      <link>https://l4linux.com/portfolio/terraform-eks/</link>
      <pubDate>Fri, 19 Jun 2020 23:00:00 +0000</pubDate>
      <guid>https://l4linux.com/portfolio/terraform-eks/</guid>
      <description>&lt;h2 id=&#34;what-is-the-significance-of-this&#34;&gt;What is the significance of this?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Using this repository, you can provision the application as well as all of your cloud infrastructure with a single command.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-is-automation-accomplished&#34;&gt;How is automation accomplished?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Terraform has been used to provision infrastructure on AWS.&lt;/li&gt;&#xA;&lt;li&gt;To make provision for application On the AWS EKS, deployment has been performed through using Helm template.&lt;/li&gt;&#xA;&lt;li&gt;To fit the Kubernetes design, the NodeJS service has been changed to a microservice.&lt;/li&gt;&#xA;&lt;li&gt;Terraform has been converted into a docker container microservice to improve team cooperation by ensuring that everyone uses the same version of the software.&lt;/li&gt;&#xA;&lt;li&gt;This project makes use of Makefile to automate the provisioning of the full stack with a single command.&lt;/li&gt;&#xA;&lt;li&gt;For convenience of usage, the load and performance testing tool locust has been transformed into a docker container.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AWS account access&lt;/li&gt;&#xA;&lt;li&gt;AWS iam programmatic user access with the follwing policy attached to the user&lt;/li&gt;&#xA;&lt;li&gt;AmazonEC2FullAccess,IAMFullAccess,AutoScalingFullAccess,AmazonEKSClusterPolicy, Â  Â  ï¿¼&lt;/li&gt;&#xA;&lt;li&gt;AmazonEKSWorkerNodePolicy,AmazonVPCFullAccess,AmazonEKSServicePolicy,AmazonEKS_CNI_Policy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://github.com/Lforlinux/aws-terraform-nodejs&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;how-to-provision-the-infra&#34;&gt;How to provision the infra&lt;/h2&gt;&#xA;&lt;p&gt;Makefile has been leveraged for the simple approach towards the one-click entire stack deployment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins as a container</title>
      <link>https://l4linux.com/portfolio/jenkins-as-a-container/</link>
      <pubDate>Fri, 19 Jun 2020 23:00:00 +0000</pubDate>
      <guid>https://l4linux.com/portfolio/jenkins-as-a-container/</guid>
      <description>&lt;h2 id=&#34;run-jenkins-as-a-container-with-the-stateful-volume&#34;&gt;&lt;em&gt;Run jenkins as a container with the stateful volume!&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;why-jenkins-as-a-container-&#34;&gt;Why Jenkins as a container ðŸ¤”&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It&amp;rsquo;s helps simplify the installation process.&lt;/li&gt;&#xA;&lt;li&gt;Decrease dependency errors.&lt;/li&gt;&#xA;&lt;li&gt;The Turnaround time for an Jenkins server installation is just few minutes.&lt;/li&gt;&#xA;&lt;li&gt;Cross platform compatible.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;why-do-we-need-a-stateful-volume&#34;&gt;Why do we need a stateful volume!ðŸ¤¨&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Containers are often an ephemeral where in Jeknins we need to save our workloads even if we are not using it regularly. As in we will setting up the users, credentials inside Jenkins so it is important to save this as a stateful volume.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lets-get-started-&#34;&gt;Let&amp;rsquo;s get started! ðŸŽ¬&lt;/h3&gt;&#xA;&lt;p&gt;Create the volume for Jenkins on Docker host.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
